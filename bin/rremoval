#!/usr/bin/python
# Copyright (C) 2015 Bitergia
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
# Authors:
#   Daniel Izquierdo Cortazar <dizquierdo@bitergia.com>

from argparse import ArgumentParser

import rremoval.backends as backends

from rremoval.backends.bicho import Bicho
from rremoval.backends.cvsanaly import CVSAnalY
from rremoval.backends.eventizer import Eventizer
from rremoval.backends.ircanalysis import IRC
from rremoval.backends.mlstats import MLStats
from rremoval.backends.pullpo import Pullpo
from rremoval.backends.sibyl import Sibyl
from rremoval.backends.wikianalysis import Wiki


from rremoval.database import Database

def read_options():
    """ Read command line options"""

    parser = ArgumentParser(description="Repository Removal Tool (rremoval)")
    parser.add_argument("-d", "--database",
                        action="store",
                        dest="dbname",
                        help="Database where information is stored")
    parser.add_argument("-u", "--db-user",
                        action="store",
                        dest="dbuser",
                        default="root",
                        help="Database user")
    parser.add_argument("-p" "--password",
                        action="store",
                        dest="dbpassword",
                        help="Database password")
    parser.add_argument("-b", "--backend",
                        action="store",
                        dest="backend",
                        help="Backend: bicho, cvsanaly, eventizer, irc, mlstats, pullpo, sibyl, wiki")
    parser.add_argument("-l", "--list-repositories",
                        action="store_true",
                        dest="backends_list",
                        help="List of available repositories in the selected backend")
    parser.add_argument("-r", "--remove-repository",
                        action="store",
                        dest="repository",
                        help="Repository to be removed in the selected backend")
    args = parser.parse_args()

    # Database options check
    if not args.dbuser:
        parser.error("Missing database user")
    if not args.dbname:
        parser.error("Missing database name")
    # Other options check
    if not args.backend:
        parser.error("Missing backend")
    if not args.backends_list and not args.repository:
        parser.error("--list-repositories or --remove-repository options should be enabled")

    backends_list = [backends.BICHO, backends.CVSANALY, backends.EVENTIZER, backends.IRC,
                     backends.MLSTATS, backends.PULLPO, backends.SIBYL, backends.WIKI]
    if not args.backend in backends_list:
        parser.error("Selected backend not found")

    return args

def init_backend(args, dbsession):
    """ Initiate backends and return a generic backend"""

    if args.backend == backends.BICHO:
        backend = Bicho(dbsession)
    elif args.backend == backends.CVSANALY:
        backend = CVSAnalY(dbsession)
    elif args.backend == backends.EVENTIZER:
        backend = Eventizer(dbsession)
    elif args.backend == backends.IRC:
        backend = IRC(dbsession)
    elif args.backend == backends.MLSTATS:
        backend = MLStats(dbsession)
    elif args.backend == backends.PULLPO:
        backend = Pullpo(dbsession)
    elif args.backend == backends.SIBYL:
        backend = Sibyl(dbsession)
    elif args.backend == backends.WIKI:
        backend = Wiki(dbsession)

    return backend

if __name__ == '__main__':

    # Read command line options
    args = read_options()

    # Init database session
    dbsession = Database(args.dbuser, args.dbpassword, args.dbname)

    # Init specific backend
    backend = init_backend(args, dbsession)

    # Executing actions
    if args.backends_list:
        # Listing backends
        backend.repositories_list()
    if args.repository:
        # Removing repository
        backend.repository_removal(args.repository)

    # Close database session
    dbsession.close_session()
